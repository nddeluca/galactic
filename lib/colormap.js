// Generated by CoffeeScript 1.4.0
(function() {
  var Colormap, Gradient;

  Gradient = require('./gradient');

  Colormap = (function() {

    function Colormap(map) {
      this.buffer = new ArrayBuffer(256 * 4);
      this.pixelMap = new Uint32Array(this.buffer);
      this.setMap(map);
    }

    Colormap.prototype.setMap = function(map) {
      switch (map.type) {
        case "LUT":
          this.map = map;
          this.loadLUT();
          return true;
        case "SAO":
          this.map = map;
          this.loadSAO();
          return true;
        default:
          return false;
      }
    };

    Colormap.prototype.loadLUT = function() {
      var b, g, increment, length, map, r;
      map = this.map;
      length = map.red.length;
      increment = 256 / length;
      r = (new Gradient()).gradient;
      g = (new Gradient()).gradient;
      return b = (new Gradient()).gradient;
    };

    Colormap.prototype.loadSAO = function() {
      var b, bIntensity, bLevel, g, gIntensity, gLevel, i, map, pixelMap, r, rIntensity, rLevel, _i, _j, _k, _ref, _ref1, _ref2;
      map = this.map;
      pixelMap = this.pixelMap;
      r = new Gradient();
      g = new Gradient();
      b = new Gradient();
      rLevel = map.red.level;
      rIntensity = map.red.intensity;
      gLevel = map.green.level;
      gIntensity = map.green.intensity;
      bLevel = map.blue.level;
      bIntensity = map.blue.intensity;
      for (i = _i = 0, _ref = rLevel.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        r.add(rLevel[i], rIntensity[i]);
      }
      for (i = _j = 0, _ref1 = gLevel.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        g.add(gLevel[i], gIntensity[i]);
      }
      for (i = _k = 0, _ref2 = bLevel.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
        b.add(bLevel[i], bIntensity[i]);
      }
      r.build();
      g.build();
      b.build();
      i = 256;
      while (i--) {
        pixelMap[i] = (255 << 24) | (b.gradient[i] << 16) | (g.gradient[i] << 8) | r.gradient[i];
      }
      return void 0;
    };

    Colormap.prototype.colorize = function(stretchData, colorData) {
      var b, g, i, level, r, type;
      type = this.map.type;
      if (type === "SAO") {
        i = stretchData.length;
        r = this.red.gradient;
        g = this.green.gradient;
        b = this.blue.gradient;
        while (i--) {
          level = stretchData[i];
          colorData[i] = (255 << 24) | (b[level] << 16) | (g[level] << 8) | r[level];
        }
        return void 0;
      }
    };

    return Colormap;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Colormap;
  }

}).call(this);
