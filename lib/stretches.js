// Generated by CoffeeScript 1.4.0
(function() {
  var stretches;

  stretches = {
    linear: function(imageData, stretchData, min, max) {
      var i, invRange;
      invRange = 1 / (max - min);
      i = stretchData.length;
      while (i--) {
        stretchData[i] = ~~(255 * ((imageData[i] - min) * invRange));
      }
      return void 0;
    },
    log: function(imageData, stretchData, min, max) {
      var i, invLN10, invMaxLog, range, _i, _ref;
      range = max - min;
      invLN10 = 1 / Math.LN10;
      invMaxLog = 1 / (Math.log(range) * invLN10);
      for (i = _i = 0, _ref = stretchData.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        stretchData[i] = ~~(255 * ((Math.log(imageData[i] - min + 1) * invLN10) * invMaxLog));
      }
      return void 0;
    },
    power: function(imageData, stretchData, min, max) {
      var i, invMaxPow, range, value, _i, _ref;
      range = max - min;
      invMaxPow = 1 / (range * range);
      for (i = _i = 0, _ref = stretchData.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        value = imageData[i] - min;
        stretchData[i] = ~~(255 * ((value * value) * invMaxPow));
      }
      return void 0;
    },
    sqrt: function(imageData, stretchData, min, max) {
      var i, invMaxSqrt, range, _i, _ref;
      range = max - min;
      invMaxSqrt = 1 / Math.sqrt(range);
      for (i = _i = 0, _ref = stretchData.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        stretchData[i] = ~~(255 * ((Math.sqrt(imageData[i] - min)) * invMaxSqrt));
      }
      return void 0;
    },
    arcsinh: function(imageData, stretchData, min, max) {
      var i, invMaxAsinh, max_asinh, point, range, value, _i, _ref;
      range = max - min;
      max_asinh = Math.log(range + Math.sqrt(range * range + 1));
      invMaxAsinh = 1 / max_asinh;
      for (i = _i = 0, _ref = stretchData.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        point = imageData[i] - min;
        value = Math.log(point + Math.sqrt(point * point + 1));
        stretchData[i] = ~~(255 * (value * invMaxAsinh));
      }
      return void 0;
    }
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = stretches;
  }

}).call(this);
