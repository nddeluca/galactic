// Generated by CoffeeScript 1.6.3
(function() {
  var stretches;

  stretches = {
    linear: function(imageData, colorData, pixelMap, min, max) {
      var i, invRange, level, value;
      invRange = 1 / (max - min);
      i = imageData.length;
      while (i--) {
        value = ~~(255 * ((Math.abs(imageData[i] - min)) * invRange));
        level = Math.max(0, Math.min(value, 255));
        colorData[i] = pixelMap[level];
      }
      return void 0;
    },
    log: function(imageData, colorData, pixelMap, min, max) {
      var i, invLN10, invMaxLog, level, range, value;
      range = max - min;
      invLN10 = 1 / Math.LN10;
      invMaxLog = 1 / (Math.log(range) * invLN10);
      i = imageData.length;
      while (i--) {
        value = ~~(255 * ((Math.log(imageData[i] - min + 1) * invLN10) * invMaxLog));
        level = Math.max(0, Math.min(value, 255));
        colorData[i] = pixelMap[level];
      }
      return void 0;
    },
    power: function(imageData, colorData, pixelMap, min, max) {
      var i, invMaxPow, level, range, tmp, value;
      range = max - min;
      invMaxPow = 1 / (range * range);
      i = imageData.length;
      while (i--) {
        tmp = imageData[i] - min;
        value = ~~(255 * ((tmp * tmp) * invMaxPow));
        level = Math.max(0, Math.min(value, 255));
        colorData[i] = pixelMap[level];
      }
      return void 0;
    },
    sqrt: function(imageData, colorData, pixelMap, min, max) {
      var i, invMaxSqrt, level, range, value;
      range = max - min;
      invMaxSqrt = 1 / Math.sqrt(range);
      i = imageData.length;
      while (i--) {
        value = ~~(255 * ((Math.sqrt(imageData[i] - min)) * invMaxSqrt));
        level = Math.max(0, Math.min(value, 255));
        colorData[i] = pixelMap[level];
      }
      return void 0;
    },
    arcsinh: function(imageData, colorData, pixelMap, min, max) {
      var i, invMaxAsinh, level, max_asinh, range, tmp, value;
      range = max - min;
      max_asinh = Math.log(range + Math.sqrt(range * range + 1));
      invMaxAsinh = 1 / max_asinh;
      i = imageData.length;
      while (i--) {
        tmp = imageData[i] - min;
        value = ~~(255 * (Math.log(tmp + Math.sqrt(tmp * tmp + 1))) * invMaxAsinh);
        level = Math.max(0, Math.min(value, 255));
        colorData[i] = pixelMap[level];
      }
      return void 0;
    }
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = stretches;
  }

}).call(this);
