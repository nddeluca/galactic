// Generated by CoffeeScript 1.4.0
(function() {
  var ColumnManipulator, Image, ImagePadder, PSFConvolutor, RowManipulator, fft_dif4_core, fft_dit4_core;

  fft_dif4_core = require('./math/fftdif4');

  fft_dit4_core = require('./math/fftdit4');

  RowManipulator = require('./row_manipulator');

  ColumnManipulator = require('./column_manipulator');

  ImagePadder = require('./image_padder');

  Image = require('./image');

  PSFConvolutor = (function() {

    function PSFConvolutor(args) {
      if (args == null) {
        args = {};
      }
      this.model = args.model;
      this.psf = args.psf;
      this.modelPadder = new ImagePadder({
        image: this.model,
        type: Image
      });
      this.psfPadder = new ImagePadder({
        image: this.psf,
        type: Image
      });
      this.rows = this.modelPadder.paddedImage.height;
      this.columns = this.modelPadder.paddedImage.width;
      this.iModelImage = new Image({
        width: this.columns,
        height: this.rows,
        dataType: this.model.dataType
      });
      this.iPsfImage = new Image({
        width: this.columns,
        height: this.rows,
        dataType: this.psf.dataType
      });
      this.rRowModel = new RowManipulator({
        image: this.modelPadder.paddedImage
      });
      this.iRowModel = new RowManipulator({
        image: this.iModelImage
      });
      this.rRowPsf = new RowManipulator({
        image: this.psfPadder.paddedImage
      });
      this.iRowPsf = new RowManipulator({
        image: this.iPsfImage
      });
      this.rColModel = new ColumnManipulator({
        image: this.modelPadder.paddedImage
      });
      this.iColModel = new ColumnManipulator({
        image: this.iModelImage
      });
      this.rColPsf = new ColumnManipulator({
        image: this.psfPadder.paddedImage
      });
      this.iColPsf = new ColumnManipulator({
        image: this.iPsfImage
      });
      this.paddedLength = this.rows * this.columns;
      this.ldnRow = Math.log(this.rows) / Math.LN2;
      this.ldnColumn = Math.log(this.columns) / Math.LN2;
      this.transform_psf();
    }

    PSFConvolutor.prototype.transform_psf = function() {
      var c, columns, iCol, iColM, iRow, iRowM, imImage, l, ldnCol, ldnRow, paddedLength, padder, r, rCol, rColM, rRow, rRowM, rows;
      rows = this.rows;
      columns = this.columns;
      ldnRow = this.ldnRow;
      ldnCol = this.ldnColumn;
      padder = this.psfPadder;
      paddedLength = rows * columns;
      imImage = this.iPsfImage.data;
      rRowM = this.rRowPsf;
      iRowM = this.iRowPsf;
      rColM = this.rColPsf;
      iColM = this.iColPsf;
      rRow = rRowM.row;
      iRow = iRowM.row;
      rCol = rColM.column;
      iCol = iColM.column;
      padder.load();
      l = paddedLength;
      while (l--) {
        imImage[l] = 0;
      }
      r = rows;
      while (r--) {
        rRowM.load(r);
        iRowM.load(r);
        fft_dif4_core(iRow, rRow, ldnRow);
        rRowM.save(r);
        iRowM.save(r);
      }
      c = columns;
      while (c--) {
        rColM.load(c);
        iColM.load(c);
        fft_dif4_core(iCol, rCol, ldnCol);
        rColM.save(c);
        iColM.save(c);
      }
      return void 0;
    };

    PSFConvolutor.prototype.convolute = function() {
      var a, b, c, columns, d, iCol, iColM, iModelData, iPsfData, iRow, iRowM, l, ldnCol, ldnRow, modelData, modelLength, n, norm, paddedLength, padder, r, rCol, rColM, rModelData, rPsfData, rRow, rRowM, rows;
      rows = this.rows;
      columns = this.columns;
      ldnRow = this.ldnRow;
      ldnCol = this.ldnColumn;
      modelData = this.model.data;
      modelLength = this.model.width * this.model.height;
      n = rows * columns;
      norm = 1 / (n * n);
      padder = this.modelPadder;
      paddedLength = rows * columns;
      rPsfData = this.psfPadder.paddedImage.data;
      iPsfData = this.iPsfImage.data;
      rModelData = this.modelPadder.paddedImage.data;
      iModelData = this.iModelImage.data;
      rRowM = this.rRowModel;
      iRowM = this.iRowModel;
      rColM = this.rColModel;
      iColM = this.iColModel;
      rRow = rRowM.row;
      iRow = iRowM.row;
      rCol = rColM.column;
      iCol = iColM.column;
      padder.load();
      l = paddedLength;
      while (l--) {
        iModelData[l] = 0;
      }
      r = rows;
      while (r--) {
        rRowM.load(r);
        iRowM.load(r);
        fft_dif4_core(iRow, rRow, ldnRow);
        rRowM.save(r);
        iRowM.save(r);
      }
      c = columns;
      while (c--) {
        rColM.load(c);
        iColM.load(c);
        fft_dif4_core(iCol, rCol, ldnCol);
        rColM.save(c);
        iColM.save(c);
      }
      l = paddedLength;
      l = 0;
      while (l--) {
        a = rModelData[l];
        b = iModelData[l];
        c = rPsfData[l];
        d = iPsfData[l];
        rModelData[l] = a * c - b * d;
        iModelData[l] = a * d + b * c;
      }
      r = rows;
      while (r--) {
        rRowM.load(r);
        iRowM.load(r);
        fft_dit4_core(rRow, iRow, ldnRow);
        rRowM.save(r);
        iRowM.save(r);
        c = columns;
      }
      while (c--) {
        rColM.load(c);
        iColM.load(c);
        fft_dit4_core(rCol, iCol, ldnCol);
        rColM.save(c);
        iColM.save(c);
      }
      padder.save();
      l = modelLength;
      while (l--) {
        modelData[l] *= norm;
      }
      return void 0;
    };

    return PSFConvolutor;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = PSFConvolutor;
  }

}).call(this);
