// Generated by CoffeeScript 1.4.0
(function() {
  var Gradient;

  Gradient = (function() {

    function Gradient() {
      this.range = 256;
      this.buffer = new ArrayBuffer(this.range * 4);
      this.gradient = new Uint32Array(this.buffer);
      this.colors = [];
      this.type = 'linear';
    }

    Gradient.prototype.addColor = function(red, blue, green, position) {
      var color;
      color = {
        r: red,
        g: green,
        b: blue,
        pos: position
      };
      return this.colors.push(color);
    };

    Gradient.prototype.generate = function() {
      var b, color1, color2, colors, g, i, j, pos1, pos2, r, range, _results;
      colors = this.colors;
      i = colors.length - 1;
      _results = [];
      while (i--) {
        color2 = colors[i + 1];
        color1 = colors[i];
        pos1 = color1.pos;
        pos2 = color2.pos;
        range = pos2 - pos1;
        _results.push((function() {
          var _i, _results1;
          _results1 = [];
          for (j = _i = range; range <= 0 ? _i <= 0 : _i >= 0; j = range <= 0 ? ++_i : --_i) {
            r = ~~((color2.r - color1.r) * (j / range));
            g = ~~((color2.g - color1.g) * (j / range));
            b = ~~((color2.b - color2.b) * (j / range));
            _results1.push(this.gradient[pos1 + j] = this.getPixel(r, g, b));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Gradient.prototype.getPixel = function(r, g, b) {
      return (255 << 24) | (r << 16) | (g << 8) | b;
    };

    return Gradient;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Gradient;
  }

}).call(this);
