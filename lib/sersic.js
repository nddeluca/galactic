// Generated by CoffeeScript 1.4.0
(function() {
  var Model, Sersic,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Model = require('./model');

  Sersic = (function(_super) {

    __extends(Sersic, _super);

    function Sersic(name, width, height) {
      this.name = name;
      this.width = width;
      this.height = height;
      Sersic.__super__.constructor.call(this, this.name, this.width, this.height);
      this.initDefaultParams();
      this.initParamArray();
    }

    Sersic.prototype.initParamArray = function() {
      return this.paramArray = ['centerX', 'centerY', 'angle', 'axisRatio', 'effRadius', 'intensity', 'n'];
    };

    Sersic.prototype.toJSON = function() {
      return JSON.stringify(this.params);
    };

    Sersic.prototype.initDefaultParams = function() {
      return this.params = {
        centerX: 31.5,
        centerY: 42,
        angle: 0,
        axisRatio: 1,
        effRadius: 6,
        intensity: 2.3,
        n: 1
      };
    };

    Sersic.prototype.build = function() {
      var angle, cos, cos_ratio, cx, cy, data, exponent, height, intensity, invAxisRatio, invEffRadius, invN, n, norm, offset, r, r_x, r_y, sin, sin_ratio, width, x, xdiff, y, ydiff;
      Sersic.__super__.build.apply(this, arguments);
      data = this.data;
      n = this.params.n;
      invN = 1 / n;
      cx = this.params.centerX;
      cy = this.params.centerY;
      angle = this.params.angle;
      invAxisRatio = 1 / this.params.axisRatio;
      invEffRadius = 1 / this.params.effRadius;
      intensity = this.params.intensity;
      if (n === 4) {
        norm = 7.669;
      } else {
        norm = n * Math.exp(0.6950 - 0.1789 * invN);
      }
      sin = Math.sin(angle);
      cos = Math.cos(angle);
      sin_ratio = sin * invAxisRatio;
      cos_ratio = cos * invAxisRatio;
      width = this.width;
      height = this.height;
      y = height;
      while (y--) {
        offset = y * width;
        ydiff = y - cy;
        x = height;
        while (x--) {
          xdiff = x - cx;
          r_x = xdiff * cos + ydiff * sin;
          r_y = ydiff * cos_ratio - xdiff * sin_ratio;
          r = Math.sqrt(r_x * r_x + r_y * r_y);
          exponent = norm * (Math.pow(r * invEffRadius, invN) - 1);
          data[offset + x] = intensity * Math.exp(-exponent);
        }
      }
      return void 0;
    };

    return Sersic;

  })(Model);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Sersic;
  }

}).call(this);
