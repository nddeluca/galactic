// Generated by CoffeeScript 1.3.3
(function() {
  var Model, Sersic,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Model = require('./model');

  Sersic = (function(_super) {

    __extends(Sersic, _super);

    function Sersic(name, width, height) {
      this.name = name;
      this.width = width;
      this.height = height;
      Sersic.__super__.constructor.call(this, this.name, this.width, this.height);
      this.initDefaultParams;
      this.initParamArray;
    }

    Sersic.prototype.initParamArray = function() {
      return this.paramArray = ['centerX', 'centerY', 'angle', 'axisRatio', 'effRadius', 'intensity', 'n'];
    };

    Sersic.prototype.initDefaultParams = function() {
      return this.params = {
        centerX: 31.5,
        centerY: 42,
        angle: 0,
        axisRatio: 1,
        effRadius: 6,
        intensity: 2.3,
        n: 1
      };
    };

    Sersic.prototype.build = function() {
      var cos, exponent, norm, r, r_x, r_y, sin, x, y, _i, _j, _ref, _ref1;
      Sersic.__super__.build.apply(this, arguments);
      norm = this.params.n * Math.exp(0.6950 - 0.1789 / this.params.n);
      sin = Math.sin(this.params.angle);
      cos = Math.cos(this.params.angle);
      for (x = _i = 0, _ref = this.width - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        for (y = _j = _ref1 = this.height - 1; _ref1 <= 0 ? _j <= 0 : _j >= 0; y = _ref1 <= 0 ? ++_j : --_j) {
          r_x = (x - this.params.centerX) * cos + (y - this.params.centerY) * sin;
          r_y = ((y - this.params.centerY) * cos - (x - this.params.centerX) * sin) / this.params.axisRatio;
          r = Math.sqrt(r_x * r_x + r_y * r_y);
          exponent = norm * Math.pow(r / this.params.effRadius, 1 / this.params.n) - 1;
          this.data[y * width + x] = this.params.intensity * Math.exp(-exponent);
        }
      }
      return void 0;
    };

    return Sersic;

  })(Model);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Sersic;
  }

}).call(this);
