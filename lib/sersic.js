// Generated by CoffeeScript 1.6.3
(function() {
  var Model, Sersic, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Model = require('./model');

  Sersic = (function(_super) {
    __extends(Sersic, _super);

    function Sersic() {
      _ref = Sersic.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Sersic.prototype.set_up_parameters = function(args) {
      this.centerX = args.centerX != null ? args.centerX - 1 : this.width / 2 - 1;
      this.centerY = args.centerY != null ? args.centerY - 1 : this.height / 2 - 1;
      this.angle = args.angle != null ? args.angle : 0;
      this.axisRatio = args.axisRatio != null ? args.axisRatio : 1;
      this.effRadius = args.effRadius != null ? args.effRadius : (this.centerX + this.centerY) / 4;
      this.intensity = args.intensity ? args.intensity : 10;
      return this.n = args.n != null ? args.n : 4;
    };

    Sersic.prototype.on_params_update = function(args) {
      if (args.centerX != null) {
        this.centerX = args.centerX;
      }
      if (args.centerY != null) {
        this.centerY = args.centerY;
      }
      if (args.angle != null) {
        this.angle = args.angle;
      }
      if (args.axisRatio != null) {
        this.axisRatio = args.axisRatio;
      }
      if (args.effRadius != null) {
        this.effRadius = args.effRadius;
      }
      if (args.intensity != null) {
        this.intensity = args.intensity;
      }
      if (args.n != null) {
        return this.n = args.n;
      }
    };

    Sersic.prototype.calculate = function() {
      var angle, cos, cos_ratio, cx, cy, data, exponent, height, intensity, invAxisRatio, invEffRadius, invN, n, norm, offset, r, r_x, r_y, sin, sin_ratio, width, x, xdiff, y, ydiff;
      data = this.data;
      n = this.n;
      invN = 1 / n;
      cx = this.centerX;
      cy = this.centerY;
      angle = this.angle;
      invAxisRatio = 1 / this.axisRatio;
      invEffRadius = 1 / this.effRadius;
      intensity = this.intensity;
      if (n === 4) {
        norm = 7.669;
      } else {
        norm = n * Math.exp(0.6950 - 0.1789 * invN);
      }
      sin = Math.sin(angle);
      cos = Math.cos(angle);
      sin_ratio = sin * invAxisRatio;
      cos_ratio = cos * invAxisRatio;
      width = this.width;
      height = this.height;
      y = height;
      while (y--) {
        offset = y * width;
        ydiff = y - cy;
        x = width;
        while (x--) {
          xdiff = x - cx;
          r_x = xdiff * cos + ydiff * sin;
          r_y = ydiff * cos_ratio - xdiff * sin_ratio;
          r = Math.sqrt(r_x * r_x + r_y * r_y);
          exponent = norm * (1 - Math.pow(r * invEffRadius, invN));
          data[offset + x] = intensity * Math.exp(exponent);
        }
      }
      return void 0;
    };

    return Sersic;

  })(Model);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Sersic;
  }

}).call(this);
