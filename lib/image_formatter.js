// Generated by CoffeeScript 1.4.0
(function() {
  var Colormap, Image, ImageFormatter, colors, stretches, utils;

  stretches = require('./stretches');

  colors = require('./colors');

  utils = require('./utils/arrayutils');

  Image = require('./image');

  Colormap = require('./colormap');

  ImageFormatter = (function() {

    function ImageFormatter(args) {
      this.input = args.input || (function() {
        throw "No input provided";
      })();
      this.output = args.output || new Image({
        width: this.input.width,
        height: this.input.height,
        dataType: Uint32Array
      });
      this.stretch = args.strech || stretches.linear;
      this.colors = args.colors || colors;
      this.colormap = args.colormap || new Colormap(this.colors.gray);
      this.stretches = args.stretches || stretches;
      this.min = utils.min(input.data);
      this.max = utils.max(input.data);
    }

    ImageFormatter.prototype.setStretch = function(stretch) {
      switch (stretch) {
        case "linear":
          this.stretch = this.stretches.linear;
          return true;
        case "log":
          this.stretch = this.stretches.log;
          return true;
        case "power":
          this.stretch = this.stretches.power;
          return true;
        case "sqrt":
          this.stretch = this.stretches.sqrt;
          return true;
        case "arcsinh":
          this.stretch = this.stretches.arcsinh;
          return true;
        default:
          return false;
      }
    };

    ImageFormatter.prototype.setColormap = function(map) {
      switch (map) {
        case "gray":
          this.colormap.setMap(this.colors.gray);
          return true;
        case "red":
          this.colormap.setMap(this.colors.red);
          return true;
        case "green":
          this.colormap.setMap(this.colors.green);
          return true;
        case "blue":
          this.colormap.setMap(this.colors.blue);
          return true;
        case "heat":
          this.colormap.setMap(this.colors.heat);
          return true;
        case "a":
          this.colormap.setMap(this.colors.a);
          return true;
        case "b":
          this.colormap.setMap(this.colors.b);
          return true;
        case "bb":
          this.colormap.setMap(this.colors.bb);
          return true;
        case "cool":
          this.colormap.setMap(this.colors.cool);
          return true;
        case "he":
          this.colormap.setMap(this.colors.he);
          return true;
        case "rainbow":
          this.colormap.setMap(this.colors.rainbow);
          return true;
        case "standard":
          this.colormap.setMap(this.colors.standard);
          return true;
        default:
          return false;
      }
    };

    ImageFormatter.prototype.convert = function() {
      this.stretch(this.input.data, this.output.data, this.colormap.pixelMap, this.min, this.max);
      return this.output;
    };

    return ImageFormatter;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = ImageFormatter;
  }

}).call(this);
