// Generated by CoffeeScript 1.3.3
(function() {
  var Canvas, Display, Image, colors, stretches, utils,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Canvas = require('./canvas');

  stretches = require('./stretches');

  colors = require('./colors');

  utils = require('./utils');

  Image = require('./image');

  Display = (function(_super) {

    __extends(Display, _super);

    function Display(container, desiredWidth, image) {
      var scaledHeight, scaledWidth;
      this.image = new Image(image.width, image.height);
      this.image.data = image.data;
      this.min = utils.min(image.data);
      this.max = utils.max(image.data);
      scaledWidth = ~~desiredWidth;
      this.scaleRatio = this.image.width / scaledWidth;
      scaledHeight = ~~(this.image.height / this.scaleRatio);
      this.buildStretchBuffers();
      this.buildColorBuffers();
      this.stretch = stretches.linear;
      this.color = colors.grayscale;
      Display.__super__.constructor.call(this, container, scaledWidth, scaledHeight);
    }

    Display.prototype.setStretch = function(stretch) {
      switch (stretch) {
        case "linear":
          this.stretch = stretches.linear;
          return true;
        case "log":
          this.stretch = stretches.log;
          return true;
        case "power":
          this.stretch = stretches.power;
          return true;
        case "sqrt":
          this.stretch = stretches.sqrt;
          return true;
        case "arcsinh":
          this.stretch = stretches.arcsinh;
          return true;
        default:
          return false;
      }
    };

    Display.prototype.buildStretchBuffers = function() {
      this.stretchBuffer = new ArrayBuffer(this.image.width * this.image.height);
      this.stretchView8 = new Uint8ClampedArray(this.stretchBuffer);
      return void 0;
    };

    Display.prototype.buildColorBuffers = function() {
      this.colorBuffer = new ArrayBuffer(this.image.width * this.image.height * 4);
      this.colorView8 = new Uint8ClampedArray(this.colorBuffer);
      this.colorView32 = new Uint32Array(this.colorBuffer);
      return void 0;
    };

    Display.prototype.processImage = function() {
      var coeff, invertCoeff, x, y, _i, _j, _ref, _ref1;
      this.stretch(this.image.data, this.stretchView8, this.min, this.max);
      this.color(this.stretchView8, this.colorView32);
      invertCoeff = (this.image.height - 1) * this.image.width;
      for (x = _i = 0, _ref = this.canvasWidth - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        coeff = ~~(x * this.scaleRatio) + invertCoeff;
        for (y = _j = 0, _ref1 = this.canvasHeight - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          this.canvasView32[(this.canvasWidth * y) + x] = this.colorView32[coeff - (~~(y * this.scaleRatio)) * this.image.width];
        }
      }
      return void 0;
    };

    return Display;

  })(Canvas);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Display;
  }

}).call(this);
