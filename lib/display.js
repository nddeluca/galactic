// Generated by CoffeeScript 1.6.3
(function() {
  var Display;

  Display = (function() {
    function Display(args) {
      if (args == null) {
        args = {};
      }
      this.canvas = args.canvas || this._set_up_canvas_from_container(args.container);
      this.width = args.width || this.calculate_width(args);
      this.height = args.height || this.calculate_height(args);
      this.canvas.width = this.width;
      this.canvas.height = this.height;
      this.context = this.canvas.getContext('2d');
      this.canvasData = this.context.createImageData(this.width, this.height);
      this.canvasBuffer = new ArrayBuffer(this.width * this.height * Uint32Array.BYTES_PER_ELEMENT);
      this.canvasView8 = new Uint8ClampedArray(this.canvasBuffer);
      this.canvasView32 = new Uint32Array(this.canvasBuffer);
    }

    Display.prototype.calculate_width = function(args) {
      return 512;
    };

    Display.prototype.calculate_height = function(args) {
      return 512;
    };

    Display.prototype.draw = function(image) {
      var cData, canvasData, canvasHeight, canvasWidth, coeff, imageData, imageHeight, imageWidth, invertCoeff, x, xScaleRatio, y, yScaleRatio;
      imageData = image.data;
      imageWidth = image.width;
      imageHeight = image.height;
      canvasData = this.canvasView32;
      canvasWidth = this.width;
      canvasHeight = this.height;
      xScaleRatio = imageWidth / canvasWidth;
      yScaleRatio = imageHeight / canvasHeight;
      invertCoeff = (imageHeight - 1) * imageWidth;
      x = canvasWidth;
      while (x--) {
        coeff = ~~(x * xScaleRatio) + invertCoeff;
        y = canvasHeight;
        while (y--) {
          canvasData[(canvasWidth * y) + x] = imageData[coeff - (~~(y * yScaleRatio)) * imageWidth];
        }
      }
      cData = this.canvasData;
      cData.data.set(this.canvasView8);
      this.context.putImageData(cData, 0, 0);
      return void 0;
    };

    Display.prototype._set_up_canvas_from_container = function(container) {
      this.container = document.getElementById(container);
      this.canvas = document.createElement('canvas');
      return this.container.appendChild(this.canvas);
    };

    return Display;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Display;
  }

}).call(this);
