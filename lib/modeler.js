// Generated by CoffeeScript 1.6.3
(function() {
  var Image, Model, Modeler, Residual, Sersic, utils;

  Residual = require('./residual');

  Model = require('./model');

  Sersic = require('./sersic');

  Image = require('./image');

  utils = require('./utils/arrayutils');

  Modeler = (function() {
    function Modeler(fitsImage) {
      this.fitsImage = fitsImage;
      this.fitsData = this.fitsImage.data;
      this.width = this.fitsImage.width;
      this.height = this.fitsImage.height;
      this.image = new Image({
        width: this.width,
        height: this.height
      });
      this.residual = new Residual({
        fitsData: this.fitsData,
        modelData: this.image.data,
        width: this.width,
        height: this.height
      });
      this.models = [];
      this.undo = [];
    }

    Modeler.prototype.add = function(name, type) {
      var model;
      switch (type) {
        case 'sersic':
          model = new Sersic({
            name: name,
            width: this.width,
            height: this.height
          });
          break;
        default:
          return false;
      }
      this.models.push(model);
      return model;
    };

    Modeler.prototype.remove = function(name) {
      var index, model;
      model = this.find(name);
      index = this.models.indexOf(model);
      return this.models.splice(index, 1);
    };

    Modeler.prototype.find = function(name) {
      var model, _i, _len, _ref;
      _ref = this.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        if (model.name === name) {
          return model;
        }
      }
      return false;
    };

    Modeler.prototype.updateParams = function(name, params) {
      var model;
      model = this.find(name);
      model.updateParams(params);
      return void 0;
    };

    Modeler.prototype.updateParam = function(name, param, value) {
      var model;
      model = this.find(name);
      model[param] = value;
      return model.stale = true;
    };

    Modeler.prototype.disable = function(name) {
      var model;
      model = this.find(name);
      model.disable();
      return void 0;
    };

    Modeler.prototype.enable = function(name) {
      var model;
      model = this.find(name);
      model.enable();
      return void 0;
    };

    Modeler.prototype.getEnabledModels = function() {
      var model, models, _i, _len, _ref;
      models = [];
      _ref = this.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        if (model.enabled) {
          models.push(model);
        }
      }
      return models;
    };

    Modeler.saveUndo = function() {
      this.undo.push(this.models);
      if (this.undo.length > 10) {
        return this.undo.pop;
      }
    };

    Modeler.reloadUndo = function() {
      if (this.undo.length > 0) {
        this.models = this.undo[0];
        return this.undo.splice(0, 1);
      }
    };

    Modeler.prototype.toJSON = function() {
      return JSON.stringify(this.models);
    };

    Modeler.prototype.build = function() {
      var i, imageData, length, model, modelData, models, _i, _len;
      length = this.width * this.height;
      models = this.getEnabledModels();
      imageData = this.image.data;
      if (models.length === 0) {
        i = length;
        while (i--) {
          imageData[i] = 0;
        }
      } else {
        model = models.shift();
        if (model.stale) {
          model.build();
        }
        modelData = model.data;
        i = length;
        while (i--) {
          imageData[i] = modelData[i];
        }
        if (models.length > 0) {
          for (_i = 0, _len = models.length; _i < _len; _i++) {
            model = models[_i];
            if (model.stale) {
              model.build();
            }
            modelData = model.data;
            i = length;
            while (i--) {
              imageData[i] += modelData[i];
            }
          }
        }
      }
      this.residual.build();
      return void 0;
    };

    return Modeler;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Modeler;
  }

}).call(this);
