// Generated by CoffeeScript 1.3.3
(function() {
  var Image, Model, Modeler, Residual, Sersic, utils;

  Residual = require('./residual');

  Model = require('./model');

  Sersic = require('./sersic');

  Image = require('./image');

  utils = require('./utils');

  Modeler = (function() {

    function Modeler(fitsImage) {
      this.fitsImage = fitsImage;
      this.fitsData = this.fitsImage.data;
      this.width = this.fitsImage.width;
      this.height = this.fitsImage.height;
      this.image = new Image(this.width, this.height);
      this.models = [];
    }

    Modeler.prototype.addModel = function(name, type) {
      var model;
      switch (type) {
        case 'sersic':
          model = new Sersic(name, this.width, this.height);
          break;
        default:
          return false;
      }
      this.models.push(model);
      return model;
    };

    Modeler.prototype.removeModel = function(name) {
      var index, model;
      model = this.findModel(name);
      index = this.models.indexOf(model);
      return this.models.splice(index, 1);
    };

    Modeler.prototype.findModel = function(name) {
      var model, _i, _len, _ref;
      _ref = this.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        if (model.name === name) {
          return model;
        }
      }
      return false;
    };

    Modeler.prototype.updateParams = function(name, params) {
      var model;
      model = this.findModel(name);
      model.updateParams(params);
      return void 0;
    };

    Modeler.prototype.rebuildModel = function(name) {
      var model;
      model = this.findModel;
      model.generate;
      return void 0;
    };

    Modeler.prototype.disableModel = function(name) {
      var model;
      model = this.findModel(name);
      model.status = "Disabled";
      return void 0;
    };

    Modeler.prototype.enableModel = function(name) {
      var model;
      model = this.findModel(name);
      model.status = "Active";
      return void 0;
    };

    Modeler.prototype.findModel = function(name) {
      var model, _i, _len, _ref;
      _ref = this.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        if (model.name === name) {
          return model;
        }
      }
      return false;
    };

    Modeler.prototype.getEnabledModels = function() {
      var model, models, _i, _len, _ref;
      models = [];
      _ref = this.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        if (model.enabled) {
          models.push(model);
        }
      }
      return models;
    };

    Modeler.prototype.generate = function() {
      var index, model, models, _i, _j, _k, _len, _ref, _ref1;
      models = this.getEnabledModels;
      model = models.shift;
      model.generate;
      for (index = _i = 0, _ref = this.width * this.height; 0 <= _ref ? _i <= _ref : _i >= _ref; index = 0 <= _ref ? ++_i : --_i) {
        this.image.data[index] = model.data[index];
      }
      if (models.length > 0) {
        for (_j = 0, _len = models.length; _j < _len; _j++) {
          model = models[_j];
          model.generate;
          for (index = _k = 0, _ref1 = this.width * this.height; 0 <= _ref1 ? _k <= _ref1 : _k >= _ref1; index = 0 <= _ref1 ? ++_k : --_k) {
            this.image.data[index] += model.data[index];
          }
        }
      }
      return void 0;
    };

    return Modeler;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Modeler;
  }

}).call(this);
